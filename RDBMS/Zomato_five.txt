1. Create database Zomato


2. CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(100),
    City VARCHAR(100),
    CuisineType VARCHAR(50),
    Rating DECIMAL(2,1), 
    AverageCostForTwo DECIMAL(10,2) 
);


3.CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Phone VARCHAR(20),
    City VARCHAR(100),
    JoinDate DATE
);



4.CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10,2),
    OrderStatus VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);



5.CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2,1), 
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);




6.CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT,
    PaymentMethod VARCHAR(20),
    Amount DECIMAL(10,2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);




1.  INSERT INTO Restaurants (RestaurantID, Name, City, CuisineType, Rating, AverageCostForTwo) VALUES
(1, 'Lapino', 'Indore', 'Chinese', 4.5, 40.00),
(2, 'shyam sandwich', 'Dewas', 'Chinese', 4.2, 35.00),
(3, 'Pizza hunt', 'Ujjain', 'American', 4.0, 30.00),
(4, 'Dominos', 'Ujjain', 'Indian', 3.9, 25.00),
(5, 'Apna sweets', 'Indore', 'Indian', 4.1, 28.50),
(6, 'Agarwal Namkeen', 'Ratlam', 'Indian', 4.4, 33.00),
(7, '99Roti vala', 'Indore', 'Indian', 4.7, 38.00),
(8, 'shree maya', 'Dewas', 'south Indian', 3.8, 20.00),
(9, 'Shree leela', 'Ratlam', 'North indain', 4.3, 36.00),
(10, 'gk', 'Indore', 'Indian', 4.0, 32.00);







2.     INSERT INTO Customers (CustomerID, FirstName, LastName, Phone, City, JoinDate) VALUES
(1, 'Aarav', 'Sharma', '9876543210', 'Indore', '2023-01-15'),
(2, 'Priya', 'Verma', '8765432109', 'Ujjain', '2022-11-20'),
(3, 'Rahul', 'Mehta', '7654321098', 'Ujjain', '2023-03-05'),
(4, 'Sneha', 'Rao', '6543210987', 'Dewas', '2023-02-10'),
(5, 'Anjali', 'Iyer', '5432109876', 'Dewas', '2023-01-01'),
(6, 'Vikram', 'Das', '4321098765', 'Ratlam', '2022-12-25'),
(7, 'Karan', 'Singh', '3210987654', 'Indore', '2023-04-02'),
(8, 'Neha', 'Joshi', '2109876543', 'Ratlam', '2023-01-30'),
(9, 'Riya', 'Gupta', '1098765432', 'Indore', '2022-10-15'),
(10, 'Amit', 'Kapoor', '9988776655', 'ujjain', '2023-03-22');





3.      INSERT INTO Orders (OrderID, CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus) VALUES
(1, 1, 1, '2023-03-10', 500.00, 'Delivered'),
(2, 2, 2, '2023-03-11', 700.00, 'Delivered'),
(3, 3, 3, '2023-03-12', 650.00, 'Pending'),
(4, 4, 4, '2023-03-13', 450.00, 'Cancelled'),
(5, 5, 5, '2023-03-14', 600.00, 'Delivered'),
(6, 6, 6, '2023-03-15', 620.00, 'Pending'),
(7, 7, 7, '2023-03-16', 550.00, 'Delivered'),
(8, 8, 8, '2023-03-17', 480.00, 'Cancelled'),
(9, 9, 9, '2023-03-18', 670.00, 'Delivered'),
(10, 10, 10, '2023-03-19', 530.00, 'Delivered');




4.   INSERT INTO Reviews (ReviewID, CustomerID, RestaurantID, Rating, Comment, ReviewDate) VALUES
(1, 1, 1, 4.5, 'Delicious food and great service!', '2023-03-11'),
(2, 2, 2, 4.0, 'Loved the noodles.', '2023-03-12'),
(3, 3, 3, 3.5, 'Pasta was okay.', '2023-03-13'),
(4, 4, 4, 2.0, 'Too spicy for me.', '2023-03-14'),
(5, 5, 5, 4.1, 'Chinese flavors.', '2023-03-15'),
(6, 6, 6, 4.4, 'Nice taste !', '2023-03-16'),
(7, 7, 7, 5.0, 'biryani was okay.!', '2023-03-17'),
(8, 8, 8, 3.0, 'nothing special.', '2023-03-18'),
(9, 9, 9, 4.3, 'Perfect pizza .', '2023-03-19'),
(10, 10, 10, 4.0, 'Good food experience.', '2023-03-20');





5.      INSERT INTO Payments (PaymentID, OrderID, PaymentMethod, Amount, PaymentDate) VALUES
(1, 1, 'Card', 500.00, '2025-03-10'),
(2, 2, 'Cash', 700.00, '2025-03-11'),
(3, 3, 'Wallet', 650.00, '2025-07-12'),
(4, 4, 'Card', 450.00, '2025-03-13'),
(5, 5, 'Cash', 600.00, '2025-06-14'),
(6, 6, 'Wallet', 620.00, '2025-03-15'),
(7, 7, 'Card', 550.00, '2025-03-16'),
(8, 8, 'Cash', 480.00, '2025-04-17'),
(9, 9, 'Wallet', 670.00, '2025-03-18'),
(10, 10, 'Card', 530.00, '2025-02-19');





Assignment Queries



1.	Retrieve the names and locations of restaurants with a rating of 4.5 or higher.

SELECT Name, City
FROM Restaurants
WHERE Rating >= 4.5;



2.	Find the total number of orders placed by each customer.



SELECT CustomerID, COUNT(*) AS TotalOrders
FROM Orders
GROUP BY CustomerID;



3.	List all restaurants offering "Italian" cuisine in "Mumbai".

SELECT Name, City, CuisineType
FROM Restaurants
WHERE CuisineType = 'Indian' AND City = 'Indore';




4.	Calculate the total revenue generated by each restaurant from completed orders.


SELECT 
    RestaurantID, 
    SUM(OrderAmount) AS TotalRevenue
FROM Orders
WHERE OrderStatus = 'Delivered'
GROUP BY RestaurantID;



5.	Retrieve the most recent order placed by each customer.

SELECT o.CustomerID, o.OrderID, o.OrderDate, o.OrderAmount, o.OrderStatus
FROM Orders o
JOIN (
    SELECT CustomerID, MAX(OrderDate) AS MostRecentOrder
    FROM Orders
    GROUP BY CustomerID
) recent ON o.CustomerID = recent.CustomerID AND o.OrderDate = recent.MostRecentOrder;




6.	List customers who have not placed any orders yet.

SELECT c.CustomerID, c.FirstName, c.LastName, c.City
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;



7.	Identify the most reviewed restaurants.

SELECT r.RestaurantID, r.Name, r.City, COUNT(rev.ReviewID) AS MostReviews
FROM Reviews rev
JOIN Restaurants r ON rev.RestaurantID = r.RestaurantID
GROUP BY r.RestaurantID, r.Name, r.City
ORDER BY MostReviews DESC;



8.	Find the most preferred payment method.


SELECT PaymentMethod, COUNT(*) AS UsageCount
FROM Payments
GROUP BY PaymentMethod
ORDER BY UsageCount DESC
LIMIT 2;


9.	List the top 5 restaurants by total revenue.
SELECT 
    r.RestaurantID,
    r.Name,
    r.City,
    SUM(o.OrderAmount) AS TotalRevenue
FROM Orders o
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID, r.Name, r.City
ORDER BY TotalRevenue DESC
LIMIT 5;


10.	Show the details of all cancelled orders along with the customer's and restaurant's names.


SELECT 
    o.OrderID,
    o.OrderDate,
    o.OrderAmount,
    c.FirstName,
    c.LastName,
    r.Name AS RestaurantName,
    o.OrderStatus
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';



